// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                String              @id @default(cuid())
    name              String?
    email             String?             @unique
    password          String?
    emailVerified     DateTime?
    image             String?
    accounts          Account[]
    sessions          Session[]
    workspace         Workspace[]
    Tasks             Tasks[]
    UsersOnWorkspaces UsersOnWorkspaces[]
    UsersOnProjects   UsersOnProjects[]
    Invoice           Invoice[]
    Message           Message[]
}

model UsersOnWorkspaces {
    user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      String
    workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    workspaceId String
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt

    @@id([userId, workspaceId])
}

model Invitation {
    id          String    @id @default(cuid())
    email       String    @unique
    token       String    @unique
    workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    workspaceId String
}

model Workspace {
    id                String              @id @default(cuid())
    owner             User                @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    ownerId           String              @unique
    createdAt         DateTime            @default(now())
    updatedAt         DateTime            @updatedAt
    projects          Project[]
    UsersOnWorkspaces UsersOnWorkspaces[]
    Invitation        Invitation[]
    Services          Services[]
    Invoice           Invoice[]
    checkout          Checkout?
    Notification      Notification[]
}

model Project {
    id              String            @id @default(cuid())
    name            String
    description     String?
    deadLine        DateTime
    workspace       Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    workspaceId     String
    createdAt       DateTime          @default(now())
    updatedAt       DateTime          @updatedAt
    TaskSection     TaskSection[]
    Files           Files[]
    UsersOnProjects UsersOnProjects[]
    Invoice         Invoice[]
    Message         Message[]
    InternalNote    InternalNote[]
    Notification    Notification[]
}

model Message {
    id        String   @id @default(cuid())
    text      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId String
}

model InternalNote {
    id        String   @id @default(cuid())
    text      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId String
}

model UsersOnProjects {
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@id([userId, projectId])
}

model TaskSection {
    id        String  @id @default(cuid())
    title     String
    Tasks     Tasks[]
    Project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId String
    order     Int     @default(0)
}

model Tasks {
    id            String      @id @default(cuid())
    title         String
    description   String?
    assignee      User?       @relation(fields: [assigneeId], references: [id], onDelete: Cascade)
    assigneeId    String?
    dueDateStart  DateTime?
    dueDateEnd    DateTime?
    createdAt     DateTime    @default(now())
    updatedAt     DateTime    @updatedAt
    TaskSection   TaskSection @relation(fields: [taskSectionId], references: [id], onDelete: Cascade)
    taskSectionId String
    order         Int         @default(0)
}

model Invoice {
    id          String        @id @default(cuid())
    title       String
    amount      Float
    dueDate     DateTime
    service     Services      @relation(fields: [serviceId], references: [id])
    serviceId   String
    status      InvoiceStatus @default(PENDING)
    Workspace   Workspace?    @relation(fields: [workspaceId], references: [id])
    workspaceId String?
    Client      User          @relation(fields: [clientId], references: [id])
    clientId    String
    Project     Project       @relation(fields: [projectId], references: [id])
    projectId   String
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt
    Files       Files[]
}

model Files {
    id        String   @id @default(cuid())
    projectId String
    Project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
    name      String
    url       String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    Invoice   Invoice? @relation(fields: [invoiceId], references: [id])
    invoiceId String?
}

model Services {
    id          String     @id @default(cuid())
    name        String
    price       Int
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt
    Workspace   Workspace? @relation(fields: [workspaceId], references: [id])
    workspaceId String?
    Invoice     Invoice[]
}

model Checkout {
    id          String    @id @default(cuid())
    workspace   Workspace @relation(fields: [workspaceId], references: [id])
    workspaceId String    @unique
    Stripe      Stripe?
}

model Stripe {
    id         String   @id @default(cuid())
    secret_key String
    public_key String
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    checkout   Checkout @relation(fields: [checkoutId], references: [id])
    checkoutId String   @unique
}

model Notification {
    id          String           @id @default(cuid())
    text        String
    createdAt   DateTime         @default(now())
    updatedAt   DateTime         @updatedAt
    workspace   Workspace        @relation(fields: [workspaceId], references: [id])
    workspaceId String
    read        Boolean          @default(false)
    type        NotificationType @default(DEFAULT)
    project     Project?         @relation(fields: [projectId], references: [id])
    projectId   String?
}

enum NotificationType {
    DEFAULT
    INVITATION
    INVOICE
    MESSAGE
    INTERNAL_NOTE
    TASK
    PROJECT
}

enum InvoiceStatus {
    PENDING
    PAID
    CANCELLED
}

enum WorkspaceStatus {
    SENT
    ACCEPTED
}
